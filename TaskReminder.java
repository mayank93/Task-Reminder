/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.*;
import javax.imageio.ImageIO;

/**
 *
 * @author mayank
 */
public class TaskReminder extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public TaskReminder(String title) {
        initComponents();
        this.setTitle(title);
         try{
                File file =new File(System.getProperty("user.home")+"/.taskReminder/task.txt");
                if (!file.exists()) {
                        file.createNewFile();
                }             
                String sCurrentLine;
                String allTask="";
                FileReader rw =new FileReader(file.getAbsoluteFile());
                BufferedReader br = new BufferedReader(rw);
                 while ((sCurrentLine= br.readLine()) != null) {
			 if(sCurrentLine.trim().length()>1){
                         	allTask+=sCurrentLine+"\n";
			 }
                }
                t1.setText(allTask);
                br.close();
        }catch( IOException e){ 
                System.out.println(e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        b1 = new javax.swing.JButton();
        b2 = new javax.swing.JButton();
        b3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        t1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        b1.setText("Apply");
        b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b1ActionPerformed(evt);
            }
        });

        b2.setText("OK");
        b2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b2ActionPerformed(evt);
            }
        });

        b3.setText("Cancel");
        b3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b3ActionPerformed(evt);
            }
        });

        t1.setColumns(20);
        t1.setRows(5);
        jScrollPane1.setViewportView(t1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(b1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addComponent(b2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(b3)))
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b1)
                    .addComponent(b2)
                    .addComponent(b3))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void b1ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        // TODO add your handling code here:
          try{
                File file =new File(System.getProperty("user.home")+"/.taskReminder/task.txt");
                if (!file.exists()) {
                        file.createNewFile();
                }       
                FileWriter fw = new FileWriter(file.getAbsoluteFile());
                BufferedWriter bw = new BufferedWriter(fw);
                bw.write(t1.getText());
                bw.close();
        }catch( IOException e){ 
               System.out.println(e);
        }
        changeWallpaper();
       
    }                                  

    private void b2ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        // TODO add your handling code here:
          try{
                File file =new File(System.getProperty("user.home")+"/.taskReminder/task.txt");
                if (!file.exists()) {
                        file.createNewFile();
                }       
                FileWriter fw = new FileWriter(file.getAbsoluteFile());
                BufferedWriter bw = new BufferedWriter(fw);
                bw.write(t1.getText());
                bw.close();
        }catch( IOException e){ 
               System.out.println(e);
        }
        changeWallpaper();
        System.exit(0);
    }                                  

    private void b3ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        // TODO add your handling code here:
        System.exit(0);
    }                                  
private void textOverlay() {
	BufferedImage image;
       	boolean task=false;
 	try{
	        File file =new File(System.getProperty("user.home")+"/.taskReminder/task.txt");
                if (!file.exists()) {
                        file.createNewFile();
                }             
                String sCurrentLine;                
                FileReader rw =new FileReader(file.getAbsoluteFile());
                BufferedReader br = new BufferedReader(rw);
                 while ((sCurrentLine= br.readLine()) != null) {
			 if( (sCurrentLine.trim().length()>1) && (task==false) ){
				 	task=true;
					break;
				 }
		}
                br.close();
        }catch( IOException e){ 
            System.out.println(e);
	    }  
	
	try {
	    if(task==true){
	    	image = ImageIO.read(new File(System.getProperty("user.home")+"/.taskReminder/work.png"));
	    }else{
	    	image = ImageIO.read(new File(System.getProperty("user.home")+"/.taskReminder/nowork.png"));
	    }
	    image = process(image);
	    ImageIO.write(image, "png",new File(System.getProperty("user.home")+"/.taskReminder/wallpaper.png"));
	} catch (IOException e) {
		System.out.println(e);
	}
}

private BufferedImage process(BufferedImage old) {
	int w = old.getWidth();
	int h = old.getHeight();
	BufferedImage img = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
	Graphics2D g2d = img.createGraphics();
	g2d.drawImage(old, 0, 0, null);
	g2d.setPaint(Color.white);
	g2d.setFont(new Font("Serif", Font.BOLD, 50));
	FontMetrics fm = g2d.getFontMetrics();
        int x,y;
        x=100;
        y=200;        
        try{
                File file =new File(System.getProperty("user.home")+"/.taskReminder/task.txt");
                if (!file.exists()) {
                        file.createNewFile();
                }             
                String sCurrentLine;                
                FileReader rw =new FileReader(file.getAbsoluteFile());
                BufferedReader br = new BufferedReader(rw);
		while ((sCurrentLine= br.readLine()) != null) {
			if(sCurrentLine.trim().length()>1){
				g2d.drawString(sCurrentLine, x, y);                
				y+=100;
			}
		}
		g2d.dispose();
		br.close();
        }catch( IOException e){ 
            System.out.println(e);
        }       
        return img;
    }
    private void changeWallpaper(){
        textOverlay();
        String set_bg;
        try{
            set_bg = "gsettings set org.gnome.desktop.background picture-uri file:///"+System.getProperty("user.home")+"/.taskReminder/wallpaper.png";
            Process process = Runtime.getRuntime().exec(set_bg);
        }catch( IOException e){ 
            System.out.println(e);
        }     
     }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TaskReminder("Task Reminder").setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JButton b1;
    private javax.swing.JButton b2;
    private javax.swing.JButton b3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea t1;
    // End of variables declaration                   
}

